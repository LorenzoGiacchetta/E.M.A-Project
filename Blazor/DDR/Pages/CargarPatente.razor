@using System.Drawing
@using System.Drawing.Imaging
@using System.IO
@using Microsoft.AspNetCore.Mvc
@using RestSharp
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@page "/Principal"

<AuthorizeView Roles="Admin">
   
    <div class="titulo pat">

        <h3><span>Estacionamiento medido automatico</span></h3>
    </div>

    @if (Ocupado)
    {
        <p>Procesando</p>
    }
    else if (!string.IsNullOrEmpty(Patente))
    {
        <div class="patente">
            <span>
                La patente es: 
            </span>
            <em>
                @Patente
            </em>
            <p>
                ¿La patente es correcta?
            </p>
            <input type="button" name="" value=""/> Si 
            <input type="button" name="" value="" class="btn btn-primary" @onclick="Editar" /> No

            @if (UsuarioValidacion == true)
            { 
                <em>
                    @Patente 
                </em>
                <p>
                    ¿La patente es correcta?
                </p>
                <input type="button" name="Si" value=""  />
                <input type="button" name="No" value="" class="btn btn-primary" @onclick="Editar"/>
            }
            @if (UsuarioValidacion == true)
             {
                    if (Patente != "ERROR")
                    {
                        if (Patente != "ERROR")
                        {
                            <p>tu patente esta @(Pago ? "paga" : "impaga")</p>
                        }
                    }
                    @if (Editable == true)
                    {
                        <em>
                            <input class="inputEdit" type="text" style="text-align:center" @bind="Patente"/>
                        </em>

                        <p class="EnviarPatEditadaEm">
                            <input class="EnviarPatEditada" type="submit" @onclick="SendFile"/>
                        </p>
                    }
             }

        </div>
    }

    @if (!string.IsNullOrEmpty(Base64Img))
    {
        <div class="img-patente">
            <img class="align-content-center" style="width:400px" src="data:image/jpg;base64,  @Base64Img" />
        </div>
    }

    <p>@Error</p>

    <label class="cargar-patente" for="input-patente" hidden="@Ocupado">
        <span>
            Ingresar patente
        </span>
    </label>

    <InputFile OnChange="@LoadFile" class="align-text-bottom patente" id="input-patente" hidden="@Ocupado"/>

    <br/>
    @if (ImageArray is not null)
    {
        <button class="" @onclick="SendFile" disabled="@Ocupado">Enviar</button>
    }
</AuthorizeView>
@code {
    bool Ocupado { get; set; }
    bool Pago { get; set; }
    string Patente { get; set; }
    string Base64Img { get; set; }
    string Error { get; set; }
    byte[] ImageArray { get; set; }
    bool UsuarioValidacion { get; set; }
    bool Editable { get; set; }
    string stringBorrar { get; set; }

    
    [Authorize(Roles = "Admin")]
    public class AdministrationController : Controller
    {
        public IActionResult Index() =>
            Content("Admin");
    }

    public void Editar()
    {
        Editable = !Editable;
    }

    //public string EnviarPatEditada(string Patente)
    //{
    //    Patente;


    //    return Patente;
    //}

    private async void LoadFile(InputFileChangeEventArgs e)
    {
        //if (!e.File.Name.Contains(".jpeg") || !e.File.Name.Contains(".jpg") || !e.File.Name.Contains(".png"))
        //{
        //    Error = "Archivo no soportado";
        //    return;
        //}

        Ocupado = true;

        // Creamos un nuevo Stream con la foto que viene del InputFile
        await using var ms = new MemoryStream();
        await e.File.OpenReadStream(e.File.Size).CopyToAsync(ms);

        // Usamos el Stream original y lo guardamos en un Image para poder cambiarle el tamaño,
        // ya que el método ScaleImage requiere de un Image, no de un Stream
        Image imagenOriginal = Image.FromStream(ms);
        // Utilizamos el método ScaleImage para reducir el tamaño de la imágen original, con un alto de 400 pixeles
        Image imagenNueva = ScaleImage(imagenOriginal, 500);
        imagenNueva.Save("test.jpg");

        // Creamos un nuevo Stream para guardar la nueva imagen y convertirla a un arreglo de bytes
        await using var newFs = new MemoryStream();
        imagenNueva.Save(newFs, ImageFormat.Jpeg);
        ImageArray = newFs.ToArray();

        // Esta conversión la hacemos para poder mostrar un "preview" de la imágen subida
        Base64Img = Convert.ToBase64String(ImageArray);
        Ocupado = false;
        StateHasChanged();
    }

    public async void SendFile()
    {
        if (ImageArray is not null && !Ocupado)
        {
            Ocupado = true;
            var client = new RestClient("http://127.0.0.1:5000");
            var request = new RestRequest("/api/v1/patente")
            .AddFile("patente", ImageArray, "patente.jpg");
            var response = await client.PostAsync<string>(request);
            Patente = response;
            //RandomPago();
            await ComprobarPago();
            Ocupado = false;
            StateHasChanged();
        }
    }

    //public async void SendFileDos()
    //{
    //    string PatenteEditada = ?????? ;
    //    Patente = PatenteEditada;

    //}

    //CREAMOS UN METODO PARA LA BUSQUEDA DE LA PATENTE EN LA BASE DE DATOS
    private async Task ComprobarPago()
    {

        if (Patente.Length == 8)
        {
            stringBorrar = Patente.Substring(0, 7).ToString();

        }
        else if (Patente.Length == 10)
        {
            stringBorrar = Patente.Substring(0, 9).ToString();
        }

        using var context = DbFactory.CreateDbContext();
        // BUSCA EN LA PRIMERA LINEA UNA SOLA PATENTE
        var patenteDb = await context.Patentes.SingleOrDefaultAsync(p => p.Caracteres == stringBorrar);
        // SI LA PATENTE ESTA PAGADA ENTONCES ES NULA, DEVUELVE EL ESTADO DE PAGO
        if (patenteDb is not null)
        {
            Pago = patenteDb.Pagada;
        }
    }

    //PROBANDO IF RANDOM
    //private void RandomPago()
    //{
    //    if (!string.IsNullOrEmpty(Patente) && Patente != "ERROR")
    //    {
    //        if (Pagos.ContainsKey(Patente) == false)
    //        {
    //            int random;
    //            random = new Random().Next(0, 9);
    //            if (random % 2 == 0)
    //            {
    //                Pago = true;
    //            }
    //            else
    //            {
    //                Pago = false;
    //            }
    //            Pagos.Add(Patente, Pago);
    //        }
    //        else
    //        {
    //            Pago = Pagos[Patente];
    //        }
    //    }
    //}

    private Image ScaleImage(Image image, int height)
    {
        double ratio = (double)height / image.Height;
        int newWidth = (int)(image.Width * ratio);
        int newHeight = (int)(image.Height * ratio);
        Bitmap newImage = new Bitmap(newWidth, newHeight);
        using (Graphics g = Graphics.FromImage(newImage))
        {
            g.DrawImage(image, 0, 0, newWidth, newHeight);
        }
        image.Dispose();
        return newImage;
    }
}
